stages:
  - build

build:centos:7:
  stage: build
  image: centos:7
  tags:
  - docker-executor
  variables:
    GO_VERSION: "1.20.1"
    NFPM_VERSION: "cab913a228da225ed2de98899566be21d94632dd"
  script:
  - yum install -y epel-release
  - yum install -y
      curl
      gcc
      git
      make
      mesa-libGL-devel
      patch
      zstd
  - git clone --branch "${CI_COMMIT_REF_NAME}" --depth 1 "${CI_REPOSITORY_URL}" /opt/pymoldyn
  - curl -fL "https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz" |
    tar -C /opt -xzf -
  - /opt/go/bin/go install "github.com/goreleaser/nfpm/v2/cmd/nfpm@${NFPM_VERSION}"
  - curl -fLO 'https://repo.anaconda.com/miniconda/Miniconda2-latest-Linux-x86_64.sh'
  - chmod +x Miniconda2-latest-Linux-x86_64.sh
  - ./Miniconda2-latest-Linux-x86_64.sh -b -p "/opt/pymoldyn/env"
  - cd /opt/pymoldyn
  - ./env/bin/conda install -y
      h5py
      jinja2
      pyopengl
      pyqt
      python-dateutil
  - GR_FORCE_DOWNLOAD=1 ./env/bin/pip install --no-cache-dir 'gr==1.23.2'
  - ./env/bin/conda clean -f -y --all
  - rm -rf ./env/pkgs
  - mkdir /tmp/libstdc++
  - curl -fL "https://archlinux.org/packages/core/x86_64/gcc-libs/download/" |
    zstd -d |
    tar -C /tmp/libstdc++ -xf -
  - LIBSTDCPP_NAME="$(basename "$(find /tmp/libstdc++/usr/lib -maxdepth 1 -name 'libstdc++.so.6.*')")"
  - cp "/tmp/libstdc++/usr/lib/${LIBSTDCPP_NAME}" ./env/lib/
  - ln -fs "${LIBSTDCPP_NAME}" "./env/lib/libstdc++.so.6"
  - ln -fs "libstdc++.so.6" "./env/lib/libstdc++.so"
  - cd "./env/lib/python2.7/site-packages/qtgr"
  - |
    patch -Np2 --ignore-whitespace <<'EOF'
    diff --git a/qtgr/__init__.py b/qtgr/__init__.py
    index 0a9c405..197c9ad 100755
    --- a/qtgr/__init__.py
    +++ b/qtgr/__init__.py
    @@ -59,7 +59,7 @@ class GRWidget(QWidget):
             self._mwidth = self._dwidth * 2.54 / self.physicalDpiX() / 100.
             self._mheight = self._dheight * 2.54 / self.physicalDpiY() / 100.
             self._keepRatio = False
    -        self._bgColor = QtCore.Qt.GlobalColor.white
    +        self._bgColor = QtGui.QColor("white")
             self._screen_changed_signal_connected = False
             os.environ["GKS_WSTYPE"] = "381" # GKS Qt Plugin
             os.environ["GKS_DOUBLE_BUF"] = "True"
    EOF
  - cd /opt/pymoldyn
  - PYMOLDYN_VERSION="$(./env/bin/python2 -c 'import runpy; file_globals = runpy.run_path("src/_version.py"); print(file_globals["__version__"])')"
  - make extensions
  - cd src && ../env/bin/python2 -m compileall . && cd ..
  - mkdir -p /tmp/packaging/dest && cd /tmp/packaging/dest
  - mkdir -p
      opt
      usr/bin
      usr/share/applications
      usr/share/pixmaps
  - cp -v "/opt/pymoldyn/src/icon.png" "usr/share/pixmaps/pymoldyn.png"
  - mv "/opt/pymoldyn" "./opt/"
  - |
    cat <<EOF >usr/bin/pymoldyn
    #!/bin/sh

    /opt/pymoldyn/env/bin/python2 /opt/pymoldyn/src/startGUI.py "\$@"
    EOF
  - chmod +x usr/bin/pymoldyn
  - |
    cat <<EOF >usr/share/applications/pyMolDyn.desktop
    [Desktop Entry]
    Categories=Science;
    Comment=A molecule viewer with cavity computation
    Exec=pymoldyn
    GenericName=pyMolDyn
    Icon=pymoldyn
    Name=PyMolDyn
    Terminal=false
    Type=Application
    Version=${PYMOLDYN_VERSION}
    EOF
  - rm -rf ./opt/pymoldyn/.git
  - cd ..
  - |
    cat <<EOF >nfpm.yaml
    name: "pymoldyn"
    arch: "amd64"
    platform: "linux"
    version: "${PYMOLDYN_VERSION}"
    release: 1
    maintainer: "Ingo Meyer <i.meyer@fz-juelich.de>"
    description: "pyMolDyn is a molecule viewer with cavity computation."
    homepage: "https://pgi-jcns.fz-juelich.de/portal/pages/pymoldyn-main.html"
    license: "MIT"
    contents:
    - src: ./dest/opt
      dst: /opt
      type: tree
    - src: ./dest/usr/bin/pymoldyn
      dst: /usr/bin/pymoldyn
    - src: ./dest/usr/share/applications/pyMolDyn.desktop
      dst: /usr/share/applications/pyMolDyn.desktop
    - src: ./dest/usr/share/pixmaps/pymoldyn.png
      dst: /usr/share/pixmaps/pymoldyn.png
    overrides:
      deb:
        depends:
        - libxss1
      rpm:
        depends:
        - libXScrnSaver
    EOF
  - ~/go/bin/nfpm package -p deb -t "${CI_PROJECT_DIR}"
  - ~/go/bin/nfpm package -p rpm -t "${CI_PROJECT_DIR}"
  - cd "${CI_PROJECT_DIR}"
  artifacts:
    paths:
    - ./*.deb
    - ./*.rpm

build:centos:7:iff:
  stage: build
  image: centos:7
  tags:
  - docker-executor
  variables:
    GO_VERSION: "1.20.1"
    NFPM_VERSION: "cab913a228da225ed2de98899566be21d94632dd"
  script:
  - yum install -y epel-release
  - yum install -y
      curl
      gcc
      git
      make
      mesa-libGL-devel
      patch
      zstd
  - git clone --branch "${CI_COMMIT_REF_NAME}" --depth 1 "${CI_REPOSITORY_URL}" /usr/local/pymoldyn
  - curl -fL "https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz" |
    tar -C /opt -xzf -
  - /opt/go/bin/go install "github.com/goreleaser/nfpm/v2/cmd/nfpm@${NFPM_VERSION}"
  - curl -fLO 'https://repo.anaconda.com/miniconda/Miniconda2-latest-Linux-x86_64.sh'
  - chmod +x Miniconda2-latest-Linux-x86_64.sh
  - ./Miniconda2-latest-Linux-x86_64.sh -b -p "/usr/local/pymoldyn/env"
  - cd /usr/local/pymoldyn
  - ./env/bin/conda install -y
      h5py
      jinja2
      pyopengl
      pyqt
      python-dateutil
  - GR_FORCE_DOWNLOAD=1 ./env/bin/pip install --no-cache-dir 'gr==1.23.2'
  - ./env/bin/conda clean -f -y --all
  - rm -rf ./env/pkgs
  - mkdir /tmp/libstdc++
  - curl -fL "https://archlinux.org/packages/core/x86_64/gcc-libs/download/" |
    zstd -d |
    tar -C /tmp/libstdc++ -xf -
  - LIBSTDCPP_NAME="$(basename "$(find /tmp/libstdc++/usr/lib -maxdepth 1 -name 'libstdc++.so.6.*')")"
  - cp "/tmp/libstdc++/usr/lib/${LIBSTDCPP_NAME}" ./env/lib/
  - ln -fs "${LIBSTDCPP_NAME}" "./env/lib/libstdc++.so.6"
  - ln -fs "libstdc++.so.6" "./env/lib/libstdc++.so"
  - cd "./env/lib/python2.7/site-packages/qtgr"
  - |
    patch -Np2 --ignore-whitespace <<'EOF'
    diff --git a/qtgr/__init__.py b/qtgr/__init__.py
    index 0a9c405..197c9ad 100755
    --- a/qtgr/__init__.py
    +++ b/qtgr/__init__.py
    @@ -59,7 +59,7 @@ class GRWidget(QWidget):
             self._mwidth = self._dwidth * 2.54 / self.physicalDpiX() / 100.
             self._mheight = self._dheight * 2.54 / self.physicalDpiY() / 100.
             self._keepRatio = False
    -        self._bgColor = QtCore.Qt.GlobalColor.white
    +        self._bgColor = QtGui.QColor("white")
             self._screen_changed_signal_connected = False
             os.environ["GKS_WSTYPE"] = "381" # GKS Qt Plugin
             os.environ["GKS_DOUBLE_BUF"] = "True"
    EOF
  - cd /usr/local/pymoldyn
  - PYMOLDYN_VERSION="$(./env/bin/python2 -c 'import runpy; file_globals = runpy.run_path("src/_version.py"); print(file_globals["__version__"])')"
  - make extensions
  - cd src && ../env/bin/python2 -m compileall . && cd ..
  - mkdir -p /tmp/packaging/dest && cd /tmp/packaging/dest
  - mkdir -p usr/local/bin
  - mv "/usr/local/pymoldyn" "./usr/local/"
  - |
    cat <<EOF >usr/local/bin/pymoldyn
    #!/bin/sh

    /usr/local/pymoldyn/env/bin/python2 /usr/local/pymoldyn/src/startGUI.py "\$@"
    EOF
  - chmod +x usr/local/bin/pymoldyn
  - rm -rf ./usr/local/pymoldyn/.git
  - cd ..
  - tar -C dest -czf "${CI_PROJECT_DIR}/pymoldyn-${PYMOLDYN_VERSION}-Linux-x86_64.tgz" usr
  - cd "${CI_PROJECT_DIR}"
  artifacts:
    paths:
    - pymoldyn-*-Linux-x86_64.tgz

build:macos:catalina:
  stage: build
  image: macos:catalina-xcode
  tags:
  - libvirt
  script:
  - sudo chown administrator /Applications
  - git clone --branch "${CI_COMMIT_REF_NAME}" --depth 1 "${CI_REPOSITORY_URL}" /Applications/pyMolDyn.app/Contents/MacOS
  - curl -fLO 'https://repo.anaconda.com/miniconda/Miniconda2-latest-MacOSX-x86_64.sh'
  - chmod +x Miniconda2-latest-MacOSX-x86_64.sh
  - ./Miniconda2-latest-MacOSX-x86_64.sh -b -p "/Applications/pyMolDyn.app/Contents/Resources/env"
  - cd /Applications/pyMolDyn.app/Contents/Resources/env/lib/python2.7/ctypes
  - |
    patch -N --ignore-whitespace <<'EOF'
    --- util.py     2020-04-24 00:31:54
    +++ util.patched.py     2023-02-23 17:09:20
    @@ -73,6 +73,11 @@
     if os.name == "posix" and sys.platform == "darwin":
         from ctypes.macholib.dyld import dyld_find as _dyld_find
         def find_library(name):
    +        if name == 'CoreServices':
    +            return '/System/Library/Frameworks/CoreServices.framework/CoreServices'
    +        elif name == 'libSystem.dylib':
    +            return '/usr/lib/libSystem.dylib'
    +
             possible = ['@executable_path/../lib/lib%s.dylib' % name,
                         'lib%s.dylib' % name,
                         '%s.dylib' % name,
    EOF
  - cd /Applications/pyMolDyn.app/Contents/Resources
  - ./env/bin/conda install -y
      h5py
      jinja2
      pillow
      pyopengl
      pyqt
      python-dateutil
  - ./env/bin/pip install --no-cache-dir pyobjc-framework-cocoa
  - GR_FORCE_DOWNLOAD=1 ./env/bin/pip install --no-cache-dir 'gr==1.23.2'
  - ./env/bin/pip install --no-cache-dir --force-reinstall 'numpy==1.14.2'  # Fix broken NumPy from Conda on macOS
  - ./env/bin/conda clean -f -y --all
  - rm -rf ./env/pkgs
  - cd env/lib/python2.7/site-packages/OpenGL/platform
  - |
    patch -N --ignore-whitespace <<'EOF'
    --- ctypesloader.py     2023-02-24 13:05:18
    +++ ctypesloader.patched.py     2023-02-24 13:14:17
    @@ -32,7 +32,7 @@
             dllType = dllType._dlltype
         fullName = None
         try:
    -        fullName = util.find_library( name )
    +        fullName = '/System/Library/Frameworks/OpenGL.framework/OpenGL'
             if fullName is not None:
                 name = fullName
             elif os.path.isfile( os.path.join( DLL_DIRECTORY, name + '.dll' )):
    EOF
  - cd "/Applications/pyMolDyn.app/Contents/Resources/env/lib/python2.7/site-packages/qtgr" && \
  - |
    patch -Np2 --ignore-whitespace <<'EOF'
    diff --git a/qtgr/__init__.py b/qtgr/__init__.py
    index 0a9c405..197c9ad 100755
    --- a/qtgr/__init__.py
    +++ b/qtgr/__init__.py
    @@ -59,7 +59,7 @@ class GRWidget(QWidget):
             self._mwidth = self._dwidth * 2.54 / self.physicalDpiX() / 100.
             self._mheight = self._dheight * 2.54 / self.physicalDpiY() / 100.
             self._keepRatio = False
    -        self._bgColor = QtCore.Qt.GlobalColor.white
    +        self._bgColor = QtGui.QColor("white")
             self._screen_changed_signal_connected = False
             os.environ["GKS_WSTYPE"] = "381" # GKS Qt Plugin
             os.environ["GKS_DOUBLE_BUF"] = "True"
    EOF
  - cd /Applications/pyMolDyn.app/Contents/MacOS
  - PYMOLDYN_VERSION="$(../Resources/env/bin/python2 -c 'import runpy; file_globals = runpy.run_path("src/_version.py"); print(file_globals["__version__"])')"
  - CONDA_PREFIX="/Applications/pyMolDyn.app/Contents/Resources/env" make extensions
  - cd src && ../../Resources/env/bin/python2 -m compileall . && cd ..
  - mkdir -p /tmp/packaging/dest && cd /tmp/packaging/dest
  - mkdir -p
      Applications
      usr/local/bin
  - mv "/Applications/pyMolDyn.app" "./Applications/"
  - |
    ./Applications/pyMolDyn.app/Contents/Resources/env/bin/python2 - <<EOF
    # coding: utf-8

    from __future__ import unicode_literals

    import os
    import shutil
    import subprocess
    import tempfile

    from PIL import Image


    class TemporaryDirectory(object):
        def __init__(self):
            self._path = tempfile.mkdtemp()

        def __enter__(self):
            return self._path

        def __exit__(self, *args):
            shutil.rmtree(self._path)
            self._path = None


    def create_iconset(icon_path, iconset_out_path):
        with TemporaryDirectory() as tmp_dir:
            tmp_icns_dir = os.path.join(tmp_dir, "icon.iconset")
            os.mkdir(tmp_icns_dir)
            original_icon = Image.open(icon_path)
            for name, size in (
                ("icon_{size}x{size}{suffix}.png".format(size=size, suffix=suffix), factor * size)
                for size in (16, 32, 128, 256, 512)
                for factor, suffix in ((1, ""), (2, "@2x"))
            ):
                resized_icon = original_icon.resize((size, size), Image.ANTIALIAS)
                resized_icon.save(os.path.join(tmp_icns_dir, name))
            subprocess.check_call(("iconutil", "--convert", "icns", tmp_icns_dir, "--output", iconset_out_path))


    def main():
        create_iconset(
            "./Applications/pyMolDyn.app/Contents/MacOS/src/icon.png",
            "./Applications/pyMolDyn.app/Contents/Resources/Icon.icns"
        )


    if __name__ == "__main__":
        main()
    EOF
  - |
    cat <<EOF >usr/local/bin/pymoldyn
    #!/bin/sh

    if [ "\$1" = "--batch" ]; then
      /Applications/pyMolDyn.app/Contents/Resources/env/bin/python2 /Applications/pyMolDyn.app/Contents/MacOS/src/startGUI.py "\$@"
    else
      open -a /Applications/pyMolDyn.app --args "\$@"
    fi
    EOF
  - chmod +x usr/local/bin/pymoldyn
  - |
    cat <<EOF >Applications/pyMolDyn.app/Contents/Info.plist
    <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
    <plist version="1.0">
    <dict>
        <key>CFBundleDevelopmentRegion</key>
        <string>English</string>
        <key>CFBundleExecutable</key>
        <string>src/__startup__.py</string>
        <key>CFBundleIconFile</key>
        <string>Icon.icns</string>
        <key>CFBundleIdentifier</key>
        <string>pymoldyn</string>
        <key>CFBundleInfoDictionaryVersion</key>
        <string>6.0</string>
        <key>CFBundleName</key>
        <string>pyMolDyn</string>
        <key>CFBundleDisplayName</key>
        <string>pyMolDyn</string>
        <key>CFBundleShortVersionString</key>
        <string>${PYMOLDYN_VERSION}</string>
        <key>CFBundleVersion</key>
        <string>${PYMOLDYN_VERSION}</string>
        <key>CFBundlePackageType</key>
        <string>APPL</string>
        <key>CFBundleSignature</key>
        <string>????</string>
    </dict>
    </plist>
    EOF
  - echo "APPL????" >Applications/pyMolDyn.app/Contents/PkgInfo
  - |
    cat <<EOF >Applications/pyMolDyn.app/Contents/MacOS/src/__startup__.py
    #!/Applications/pyMolDyn.app/Contents/Resources/env/bin/python2
    # coding: utf-8

    from __future__ import unicode_literals

    import os

    import startGUI
    from xml.etree import ElementTree as ET
    from Foundation import NSBundle

    def set_cf_keys():
        bundle = NSBundle.mainBundle()
        bundle_info = bundle.localizedInfoDictionary() or bundle.infoDictionary()
        info_plist = ET.parse(os.path.join(os.path.dirname(__file__), '../../Info.plist'))
        root = info_plist.getroot()
        plist_dict = root.find('dict')
        current_key = None
        for child in plist_dict:
            if child.tag == 'key' and child.text.startswith('CF'):  # CoreFoundation key
                current_key = child.text
            elif current_key is not None:
                bundle_info[current_key] = child.text
                current_key = None

    def main():
        set_cf_keys()
        startGUI.main()    # a main function is required


    if __name__ == '__main__':
        main()
    EOF
  - chmod +x ./Applications/pyMolDyn.app/Contents/MacOS/src/__startup__.py
  - rm -rf ./Applications/pyMolDyn.app/Contents/MacOS/.git
  - cd ..
  - pkgbuild
      --identifier pymoldyn
      --install-location /
      --root ./dest
      "${CI_PROJECT_DIR}/pymoldyn-${PYMOLDYN_VERSION}-x86_64.pkg"
  - cd "${CI_PROJECT_DIR}"
  artifacts:
    paths:
    - ./*.pkg

build:macos:catalina:iff:
  stage: build
  image: macos:catalina-xcode
  tags:
  - libvirt
  script:
  - sudo mkdir -p /usr/local/Applications
  - sudo chown administrator /usr/local/Applications
  - git clone --branch "${CI_COMMIT_REF_NAME}" --depth 1 "${CI_REPOSITORY_URL}" /usr/local/Applications/pyMolDyn.app/Contents/MacOS
  - curl -fLO 'https://repo.anaconda.com/miniconda/Miniconda2-latest-MacOSX-x86_64.sh'
  - chmod +x Miniconda2-latest-MacOSX-x86_64.sh
  - ./Miniconda2-latest-MacOSX-x86_64.sh -b -p "/usr/local/Applications/pyMolDyn.app/Contents/Resources/env"
  - cd /usr/local/Applications/pyMolDyn.app/Contents/Resources/env/lib/python2.7/ctypes
  - |
    patch -N --ignore-whitespace <<'EOF'
    --- util.py     2020-04-24 00:31:54
    +++ util.patched.py     2023-02-23 17:09:20
    @@ -73,6 +73,11 @@
     if os.name == "posix" and sys.platform == "darwin":
         from ctypes.macholib.dyld import dyld_find as _dyld_find
         def find_library(name):
    +        if name == 'CoreServices':
    +            return '/System/Library/Frameworks/CoreServices.framework/CoreServices'
    +        elif name == 'libSystem.dylib':
    +            return '/usr/lib/libSystem.dylib'
    +
             possible = ['@executable_path/../lib/lib%s.dylib' % name,
                         'lib%s.dylib' % name,
                         '%s.dylib' % name,
    EOF
  - cd /usr/local/Applications/pyMolDyn.app/Contents/Resources
  - ./env/bin/conda install -y
      h5py
      jinja2
      pillow
      pyopengl
      pyqt
      python-dateutil
  - ./env/bin/pip install --no-cache-dir pyobjc-framework-cocoa
  - GR_FORCE_DOWNLOAD=1 ./env/bin/pip install --no-cache-dir 'gr==1.23.2'
  - ./env/bin/pip install --no-cache-dir --force-reinstall 'numpy==1.14.2'  # Fix broken NumPy from Conda on macOS
  - ./env/bin/conda clean -f -y --all
  - rm -rf ./env/pkgs
  - cd env/lib/python2.7/site-packages/OpenGL/platform
  - |
    patch -N --ignore-whitespace <<'EOF'
    --- ctypesloader.py     2023-02-24 13:05:18
    +++ ctypesloader.patched.py     2023-02-24 13:14:17
    @@ -32,7 +32,7 @@
             dllType = dllType._dlltype
         fullName = None
         try:
    -        fullName = util.find_library( name )
    +        fullName = '/System/Library/Frameworks/OpenGL.framework/OpenGL'
             if fullName is not None:
                 name = fullName
             elif os.path.isfile( os.path.join( DLL_DIRECTORY, name + '.dll' )):
    EOF
  - cd "/usr/local/Applications/pyMolDyn.app/Contents/Resources/env/lib/python2.7/site-packages/qtgr" && \
  - |
    patch -Np2 --ignore-whitespace <<'EOF'
    diff --git a/qtgr/__init__.py b/qtgr/__init__.py
    index 0a9c405..197c9ad 100755
    --- a/qtgr/__init__.py
    +++ b/qtgr/__init__.py
    @@ -59,7 +59,7 @@ class GRWidget(QWidget):
             self._mwidth = self._dwidth * 2.54 / self.physicalDpiX() / 100.
             self._mheight = self._dheight * 2.54 / self.physicalDpiY() / 100.
             self._keepRatio = False
    -        self._bgColor = QtCore.Qt.GlobalColor.white
    +        self._bgColor = QtGui.QColor("white")
             self._screen_changed_signal_connected = False
             os.environ["GKS_WSTYPE"] = "381" # GKS Qt Plugin
             os.environ["GKS_DOUBLE_BUF"] = "True"
    EOF
  - cd /usr/local/Applications/pyMolDyn.app/Contents/MacOS
  - PYMOLDYN_VERSION="$(../Resources/env/bin/python2 -c 'import runpy; file_globals = runpy.run_path("src/_version.py"); print(file_globals["__version__"])')"
  - CONDA_PREFIX="/usr/local/Applications/pyMolDyn.app/Contents/Resources/env" make extensions
  - cd src && ../../Resources/env/bin/python2 -m compileall . && cd ..
  - mkdir -p /tmp/packaging/dest && cd /tmp/packaging/dest
  - mkdir -p
      usr/local/Applications
      usr/local/bin
  - mv "/usr/local/Applications/pyMolDyn.app" "./usr/local/Applications/"
  - |
    ./usr/local/Applications/pyMolDyn.app/Contents/Resources/env/bin/python2 - <<EOF
    # coding: utf-8

    from __future__ import unicode_literals

    import os
    import shutil
    import subprocess
    import tempfile

    from PIL import Image


    class TemporaryDirectory(object):
        def __init__(self):
            self._path = tempfile.mkdtemp()

        def __enter__(self):
            return self._path

        def __exit__(self, *args):
            shutil.rmtree(self._path)
            self._path = None


    def create_iconset(icon_path, iconset_out_path):
        with TemporaryDirectory() as tmp_dir:
            tmp_icns_dir = os.path.join(tmp_dir, "icon.iconset")
            os.mkdir(tmp_icns_dir)
            original_icon = Image.open(icon_path)
            for name, size in (
                ("icon_{size}x{size}{suffix}.png".format(size=size, suffix=suffix), factor * size)
                for size in (16, 32, 128, 256, 512)
                for factor, suffix in ((1, ""), (2, "@2x"))
            ):
                resized_icon = original_icon.resize((size, size), Image.ANTIALIAS)
                resized_icon.save(os.path.join(tmp_icns_dir, name))
            subprocess.check_call(("iconutil", "--convert", "icns", tmp_icns_dir, "--output", iconset_out_path))


    def main():
        create_iconset(
            "./usr/local/Applications/pyMolDyn.app/Contents/MacOS/src/icon.png",
            "./usr/local/Applications/pyMolDyn.app/Contents/Resources/Icon.icns"
        )


    if __name__ == "__main__":
        main()
    EOF
  - |
    cat <<EOF >usr/local/bin/pymoldyn
    #!/bin/sh

    if [ "\$1" = "--batch" ]; then
      /usr/local/Applications/pyMolDyn.app/Contents/Resources/env/bin/python2 /usr/local/Applications/pyMolDyn.app/Contents/MacOS/src/startGUI.py "\$@"
    else
      open -a /usr/local/Applications/pyMolDyn.app --args "\$@"
    fi
    EOF
  - chmod +x usr/local/bin/pymoldyn
  - |
    cat <<EOF >usr/local/Applications/pyMolDyn.app/Contents/Info.plist
    <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
    <plist version="1.0">
    <dict>
        <key>CFBundleDevelopmentRegion</key>
        <string>English</string>
        <key>CFBundleExecutable</key>
        <string>src/__startup__.py</string>
        <key>CFBundleIconFile</key>
        <string>Icon.icns</string>
        <key>CFBundleIdentifier</key>
        <string>pymoldyn</string>
        <key>CFBundleInfoDictionaryVersion</key>
        <string>6.0</string>
        <key>CFBundleName</key>
        <string>pyMolDyn</string>
        <key>CFBundleDisplayName</key>
        <string>pyMolDyn</string>
        <key>CFBundleShortVersionString</key>
        <string>${PYMOLDYN_VERSION}</string>
        <key>CFBundleVersion</key>
        <string>${PYMOLDYN_VERSION}</string>
        <key>CFBundlePackageType</key>
        <string>APPL</string>
        <key>CFBundleSignature</key>
        <string>????</string>
    </dict>
    </plist>
    EOF
  - echo "APPL????" >usr/local/Applications/pyMolDyn.app/Contents/PkgInfo
  - |
    cat <<EOF >usr/local/Applications/pyMolDyn.app/Contents/MacOS/src/__startup__.py
    #!/usr/local/Applications/pyMolDyn.app/Contents/Resources/env/bin/python2
    # coding: utf-8

    from __future__ import unicode_literals

    import os

    import startGUI
    from xml.etree import ElementTree as ET
    from Foundation import NSBundle

    def set_cf_keys():
        bundle = NSBundle.mainBundle()
        bundle_info = bundle.localizedInfoDictionary() or bundle.infoDictionary()
        info_plist = ET.parse(os.path.join(os.path.dirname(__file__), '../../Info.plist'))
        root = info_plist.getroot()
        plist_dict = root.find('dict')
        current_key = None
        for child in plist_dict:
            if child.tag == 'key' and child.text.startswith('CF'):  # CoreFoundation key
                current_key = child.text
            elif current_key is not None:
                bundle_info[current_key] = child.text
                current_key = None

    def main():
        set_cf_keys()
        startGUI.main()    # a main function is required


    if __name__ == '__main__':
        main()
    EOF
  - chmod +x ./usr/local/Applications/pyMolDyn.app/Contents/MacOS/src/__startup__.py
  - rm -rf ./usr/local/Applications/pyMolDyn.app/Contents/MacOS/.git
  - cd ..
  - tar -C dest -czf "${CI_PROJECT_DIR}/pymoldyn-${PYMOLDYN_VERSION}-macOS-x86_64.tgz" usr
  - cd "${CI_PROJECT_DIR}"
  artifacts:
    paths:
    - pymoldyn-*-macOS-x86_64.tgz
