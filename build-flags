#!/bin/bash

# Currently only Linux and Mac OSX are supported platforms

ALL=( "python" "numpy" "gr" )
SUPPORTED_OS=( "Darwin" "Linux" )

OS=$(uname -s)
SCRIPT_DIR="$(git rev-parse --show-toplevel)"

if [[ -z "${CONDA_PREFIX}" ]]; then
    CONDA_PREFIX="${SCRIPT_DIR}/env"
fi


array_contains() {
    # first argument: key, other arguments: array contains (passing by ${array[@]})
    local e
    for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
    return 1
}

relpath() {
    "${CONDA_PREFIX}/bin/python2" -c "import os.path; print(os.path.relpath('$1','${2:-$(pwd)}'))"
}

python_flags() {
    local CONDA_INCLUDE="${CONDA_PREFIX}/include/python2.7"
    local CONDA_LIB="${CONDA_PREFIX}/lib"
    local RPATH
    local INC_FLAGS
    local LIB_FLAGS

    if [[ "${OS}" == "Darwin" ]]; then
        RPATH="@loader_path/$(relpath "${CONDA_LIB}")"
    else
        RPATH="\\\$ORIGIN/$(relpath "${CONDA_LIB}")"
    fi
    INC_FLAGS="-I${CONDA_INCLUDE}"
    LIB_FLAGS="-L${CONDA_LIB} -lpython2.7 -Wl,-rpath,'${RPATH}'"

    eval "${1}=\"${INC_FLAGS}\""
    eval "${2}=\"${LIB_FLAGS}\""
}

numpy_flags() {
    local REL_NUMPY_INCLUDE="core/include"
    local PYTHON_EXEC
    local INC_FLAGS

    PYTHON_EXEC="${CONDA_PREFIX}/bin/python"

    INC_FLAGS=$(${PYTHON_EXEC} <<EOF
import numpy
import os.path
numpy_package_path = os.path.dirname(numpy.__file__)
print('-I{}'.format(os.path.join(numpy_package_path, 'core/include')))
EOF
)

    eval "${1}=\"${INC_FLAGS}\""
    eval "${2}=\"\""
}

gr_flags() {
    local GR_DIR="${CONDA_PREFIX}/lib/python2.7/site-packages/gr"
    local RPATH
    local INC_FLAGS
    local LIB_FLAGS

    if [[ "${OS}" == "Darwin" ]]; then
        RPATH="@loader_path/$(relpath "${GR_DIR}")/lib"
    else
        RPATH="\\\$ORIGIN/$(relpath "${GR_DIR}")/lib"
    fi
    INC_FLAGS="-I${GR_DIR}/include"
    LIB_FLAGS="-L${GR_DIR}/lib -lGR -lGR3 -Wl,-rpath,'${RPATH}'"

    eval "${1}=\"${INC_FLAGS}\""
    eval "${2}=\"${LIB_FLAGS}\""
}

help() {
    echo "${0} [options] [libraries]"
    echo "Prints compiler flags for given libraries."
    echo "Possible libraries: ${ALL[*]}"
    echo "Possible options: --include-flags, --lib-flags"
    echo
}

main() {
    if ! array_contains "${OS}" "${SUPPORTED_OS[@]}"; then
        echo "Sorry, your operating system is currently not supported."
        exit 1
    fi
    if array_contains "--help" "$@"; then
        help
        exit 0
    fi

    if [ ! -z "${*//--*/}" ]; then
        FLAGS_FOR=( ${*/#--*/} )
    else
        FLAGS_FOR=( "${ALL[@]}" )
    fi
    OPTIONS=( ${*/#[a-z]*/} )

    INC_FLAGS=
    LIB_FLAGS=
    for i in ${FLAGS_FOR[@]}; do
        eval "${i}_flags CURRENT_INC_FLAGS CURRENT_LIB_FLAGS"
        INC_FLAGS="${INC_FLAGS} ${CURRENT_INC_FLAGS}"
        LIB_FLAGS="${LIB_FLAGS} ${CURRENT_LIB_FLAGS}"
    done

    if [ -z "${OPTIONS[*]}" ]; then
        echo "${INC_FLAGS} ${LIB_FLAGS}"
    else
        if array_contains "--include-flags" "${OPTIONS[@]}"; then
            echo -n "${INC_FLAGS} "
        fi
        if array_contains "--lib-flags" "${OPTIONS[@]}"; then
            echo -n "${LIB_FLAGS} "
        fi
        echo
    fi
}

main $*
